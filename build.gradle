plugins {
  id 'idea'
  // Gradle plugins DSL demands constant plugin versions. Can't factor these suckers out!
  id 'com.github.johnrengelman.shadow' version '5.1.0' apply false
  id 'org.inferred.processors' version '2.2.0' apply false
}

apply from: 'vars.gradle'
apply from: 'versions.gradle'

allprojects {
  repositories {
    jcenter()
  }
}

subprojects.each {
  it.apply plugin: 'java'
}

project(":${projectLevelVariables.projectName}-api") {
  apply plugin: 'org.inferred.processors'
}

project(":${projectLevelVariables.projectName}-application") {
  apply plugin: 'application'
  apply plugin: 'com.github.johnrengelman.shadow'
}

def getNewHeapSizeNode = { ->
  new Node(null, 'option', [name: 'BUILD_PROCESS_HEAP_SIZE', value: '2048'])
}

def setHeapSizeConf = { Node compilerConf ->
  Node heapSizeConf = compilerConf.option.find { it.@name == 'BUILD_PROCESS_HEAP_SIZE' }
  if (heapSizeConf == null) {
    compilerConf.append(getNewHeapSizeNode())
  } else {
    heapSizeConf.get(0).replaceNode(getNewHeapSizeNode())
  }
}

def getNewAnnotationProcessingNode = { ->
  new Node(null, 'annotationProcessing')
}

def setAnnotationProcessingConf = { Node compilerConf ->
  if (!compilerConf.annotationProcessing) {
    compilerConf.append(getNewAnnotationProcessingNode())
  }
  NodeList annotationProcessingNode = compilerConf.annotationProcessing
  Node newAnnotationProcessingNode = getNewAnnotationProcessingNode()
  annotationProcessingNode.get(0).replaceNode(newAnnotationProcessingNode)
  Node newProfileNode = new Node(null, 'profile', [default: 'true', name: 'Default', enabled: 'true'])
  newAnnotationProcessingNode.append(newProfileNode)
}

idea.project.ipr {
  withXml { provider ->
    Node compilerConf = provider.node.component.find { it.@name == 'CompilerConfiguration' }
    setHeapSizeConf compilerConf
    setAnnotationProcessingConf compilerConf
  }
}
